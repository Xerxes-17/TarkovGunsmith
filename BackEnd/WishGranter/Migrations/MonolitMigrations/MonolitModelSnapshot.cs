// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WishGranter.Statics;

#nullable disable

namespace WishGranter.Migrations.MonolitMigrations
{
    [DbContext(typeof(Monolit))]
    partial class MonolitModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("WishGranter.Statics.Ammo_SQL", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArmorDamage")
                        .HasColumnType("INTEGER");

                    b.Property<float>("BallisticCoeficient")
                        .HasColumnType("REAL");

                    b.Property<float>("BulletDiameterMillimeters")
                        .HasColumnType("REAL");

                    b.Property<float>("BulletMass")
                        .HasColumnType("REAL");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InitialSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Penetration")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Ammos", (string)null);
                });

            modelBuilder.Entity("WishGranter.Statics.ArmorItemStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArmorMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<float>("BluntThroughput")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxDurability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TargetZone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ArmorItems");
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticDetails", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AmmoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Damage")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Penetration")
                        .HasColumnType("decimal(18,3)");

                    b.Property<float>("Speed")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("AmmoId");

                    b.HasIndex("Id", "AmmoId", "Distance")
                        .IsUnique();

                    b.ToTable("BallisticDetails", (string)null);
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticHit", b =>
                {
                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitNum")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageRemainingHitPoints")
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("BluntDamage")
                        .HasColumnType("decimal(18,3)");

                    b.Property<float>("CumulativeChanceOfKill")
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("DurabilityBeforeHit")
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("DurabilityDamageTotalAfterHit")
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("PenetrationChance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("PenetrationDamage")
                        .HasColumnType("decimal(18,3)");

                    b.Property<float>("SpecificChanceOfKill")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("TestId", "HitNum");

                    b.HasIndex("TestId", "HitNum")
                        .IsUnique();

                    b.ToTable("BallisticHits");
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticRating", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AC")
                        .HasColumnType("int")
                        .HasColumnName("AC");

                    b.Property<int>("BallisticDetailsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BallisticDetailsId");

                    b.Property<float>("FirstHitPenChance")
                        .HasColumnType("float")
                        .HasColumnName("FirstHitPenChance");

                    b.Property<int>("HeadHTK_avg")
                        .HasColumnType("int")
                        .HasColumnName("HeadHTK_avg");

                    b.Property<int>("LegHTK_avg")
                        .HasColumnType("int")
                        .HasColumnName("LegHTK_avg");

                    b.Property<int>("ThoraxHTK_avg")
                        .HasColumnType("int")
                        .HasColumnName("ThoraxHTK_avg");

                    b.HasKey("Id");

                    b.HasIndex("BallisticDetailsId");

                    b.HasIndex("Id", "BallisticDetailsId", "AC")
                        .IsUnique();

                    b.ToTable("BallisticRatings", (string)null);
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticTest", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("ArmorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ArmorId");

                    b.Property<int>("DetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProbableKillShot")
                        .HasColumnType("int")
                        .HasColumnName("ProbableKillShot");

                    b.Property<float>("StartingDurabilityPerc")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("StartingDurabilityPerc");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("DetailsId");

                    b.HasIndex("Id", "ArmorId", "DetailsId")
                        .IsUnique();

                    b.ToTable("BallisticTests", (string)null);
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticDetails", b =>
                {
                    b.HasOne("WishGranter.Statics.Ammo_SQL", null)
                        .WithMany()
                        .HasForeignKey("AmmoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticHit", b =>
                {
                    b.HasOne("WishGranter.Statics.BallisticTest", null)
                        .WithMany("Hits")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticRating", b =>
                {
                    b.HasOne("WishGranter.Statics.BallisticDetails", null)
                        .WithMany("Ratings")
                        .HasForeignKey("BallisticDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticTest", b =>
                {
                    b.HasOne("WishGranter.Statics.ArmorItemStats", null)
                        .WithMany()
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WishGranter.Statics.BallisticDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticDetails", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WishGranter.Statics.BallisticTest", b =>
                {
                    b.Navigation("Hits");
                });
#pragma warning restore 612, 618
        }
    }
}
